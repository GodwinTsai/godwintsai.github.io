{"title":"ETC1+Alpha纹理压缩自动化脚本","uid":"0fcb6ec26ac7da2494cb667ad8d042c2","slug":"ETC1+Alpha纹理压缩自动化脚本","date":"2017-12-13T15:28:47.000Z","updated":"2022-07-16T11:30:57.000Z","comments":true,"path":"api/articles/ETC1+Alpha纹理压缩自动化脚本.json","keywords":null,"cover":[],"content":"<span id=\"more\"></span>\n\n<p>尊重原创，转载请在文首注明出处：<a href=\"http://blog.csdn.net/cai612781/article/details/78798054\">http://blog.csdn.net/cai612781/article/details/78798054</a>  </p>\n<p>一，压缩方式</p>\n<p>我们在Unity中对于图集和纹理，常用的压缩方案按照质量从低到高可以分为：</p>\n<p>高压缩：Android:ETC1+Alpha, IOS:PVRTC4<br>中压缩：RGBA16+Dithering<br>无压缩：RGBA32  </p>\n<p>二，自动化脚本  </p>\n<p>有很多工具可以处理上述压缩方案，例如TexturePack。今天来总结下采用脚本自动将纹理生成ETC1+Alpha的压缩方案。</p>\n<p>采用的是Unity自带的一个压缩&#x2F;解压缩ETC格式的图像工具：etcpack.exe。在Unity 4.x中可以在Unity安装目录&#x2F;Editor&#x2F;Data&#x2F;Tools&#x2F;中找到，Unity5.x中就被移除了。<br>更多参考： <a href=\"https://en.wikipedia.org/wiki/Ericsson_Texture_Compression\">https://en.wikipedia.org/wiki/Ericsson_Texture_Compression</a>  </p>\n<p>1，有了这个工具，我们并不知道怎么用。首先打开cmd，在cmd中运行这个exe。可以看到输出了使用方法和例子。<br><img src=\"https://img-blog.csdn.net/20180107013506565\"> <img src=\"https://img-blog.csdn.net/20180107013550385\">  </p>\n<p>2，接着我们写个bat脚本来调用这个工具，保存为etc.bat文件  </p>\n<pre class=\"line-numbers language-plain\" data-language=\"plain\"><code class=\"language-plain\">@echo etc tool\n@echo %1\n@echo %2\n@echo %3\n@echo %4\n@echo %5\n@echo %6\n@echo %7\n@echo %8\n@set pngPath&#x3D;%1\n@set outputPath&#x3D;%2\n@set pkmPath&#x3D;%3\n@set alphaPkmPath&#x3D;%4\n@set pkmName&#x3D;%5\n@set alphaPkmName&#x3D;%6\n@set etcToolPath&#x3D;%7\n@set speed&#x3D;%8\n\ncd &#x2F;d %etcToolPath%\n@echo Convert PNG to PKM without alpha channel and solo alpha PKM files\netcpack %pngPath% %outputPath% -c etc1 -s %speed% -as -progress\n@echo Convert PKM files to PNG files\netcpack %pkmPath% %outputPath% -ext PNG\netcpack %alphaPkmPath% %outputPath% -ext PNG\n@echo Remove PKM files\ncd &#x2F;d %outputPath%\ndel %pkmName% &#x2F;f\ndel %alphaPkmName% &#x2F;f\n@echo DONE\n#pause</code></pre>\n\n<p>3，我们在Unity中调用这个bat脚本，主要步骤有：</p>\n<p>A，C#创建cmd进程的方法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static void ExecuteProcess(string filePath, string command, string workPath &#x3D; &quot;&quot;, int seconds &#x3D; 0)\n        &#123;\n            if (string.IsNullOrEmpty(filePath))\n            &#123;\n                return;\n            &#125;\n            Process process &#x3D; new Process();&#x2F;&#x2F;创建进程对象\n            process.StartInfo.WorkingDirectory &#x3D; workPath;\n            process.StartInfo.FileName &#x3D; filePath;\n            process.StartInfo.Arguments &#x3D; command;\n            process.StartInfo.CreateNoWindow &#x3D; true;\n            process.StartInfo.RedirectStandardOutput &#x3D; false;&#x2F;&#x2F;不重定向输出\n            try\n            &#123;\n                if (process.Start())\n                &#123;\n                    if (seconds &#x3D;&#x3D; 0)\n                    &#123;\n                        process.WaitForExit(); &#x2F;&#x2F;无限等待进程结束\n                    &#125;\n                    else\n                    &#123;\n                        process.WaitForExit(seconds); &#x2F;&#x2F;等待毫秒\n                    &#125;\n                &#125;\n            &#125;\n            catch (Exception e)\n            &#123;\n                Debug.LogError(e.Message);\n            &#125;\n            finally\n            &#123;\n                process.Close();\n            &#125;\n        &#125;</code></pre>\n\n<p>B，通过A中方法传入参数执行etc.bat，方法参数是图片asset</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static void CompressPngToEtc(UnityEngine.Object asset)\n        &#123;\n            string pngPath &#x3D; string.Concat(Application.dataPath.Replace(&quot;&#x2F;Assets&quot;, &quot;&#x2F;&quot;),\n                AssetDatabase.GetAssetPath(asset));\n            string etcToolPath &#x3D; string.Concat(Application.dataPath.Replace(&quot;&#x2F;Assets&quot;, &quot;&quot;), &quot;&#x2F;tools&#x2F;etc_tool&#x2F;&quot;);\n            string etcBatPath &#x3D; etcToolPath + &quot;&#x2F;etc.bat&quot;;\n\n            string pngName &#x3D; asset.name + &quot;png&quot;;\n            string pngFolderPath &#x3D; Path.GetDirectoryName(pngPath);\n\n            string outputPath &#x3D; pngFolderPath + &quot;&#x2F;etc&quot;;\n\n            string pkmName &#x3D; pngName.Replace(&quot;.png&quot;, &quot;.pkm&quot;);\n            string pkmPath &#x3D; outputPath + &quot;&#x2F;&quot; + pkmName;\n\n            string alphaPkmName &#x3D; pngName.Replace(&quot;.png&quot;, &quot;_alpha.pkm&quot;);\n            string alphaPkmPath &#x3D; outputPath + &quot;&#x2F;&quot; + alphaPkmName;\n\n            string speed &#x3D; &quot;fast&quot;;\n\n            string args &#x3D; string.Format(&quot;\\&quot;&#123;0&#125;\\&quot; \\&quot;&#123;1&#125;\\&quot; \\&quot;&#123;2&#125;\\&quot; \\&quot;&#123;3&#125;\\&quot; &#123;4&#125; &#123;5&#125; \\&quot;&#123;6&#125;\\&quot; &#123;7&#125;&quot;, pngPath, outputPath,\n                pkmPath, alphaPkmPath, pkmName, alphaPkmName, etcToolPath, speed);\n            ExecuteProcess(etcBatPath, args);\n        &#125;</code></pre>\n\n<p>C，增加编辑器菜单选择要处理的图片</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">[MenuItem(&quot;Assets&#x2F;Compress png 2 etc&quot;, false, 10001)]\npublic static void CreateEtc()\n&#123;\n    string path;\n    UnityEngine.Object matAsset;\n    UnityEngine.Object[] selectedAssets &#x3D; Selection.GetFiltered(typeof(Texture2D), SelectionMode.DeepAssets);\n    foreach (Object asset in selectedAssets)\n    &#123;\n        path &#x3D; AssetDatabase.GetAssetPath(asset);\n        matAsset &#x3D; AssetDatabase.LoadAssetAtPath(path.Replace(&quot;.png&quot;, &quot;.mat&quot;), typeof (Material)) as Material;\n        if (matAsset !&#x3D; null)\n        &#123;\n            CompressPngToEtc(asset);\n        &#125;\n    &#125;\n&#125;\n\n\n[MenuItem(&quot;Assets&#x2F;Compress png 2 etc&quot;, true, 10001)]\npublic static bool CreateEtcEnabled()\n&#123;\n    for (int i &#x3D; 0; i &lt; Selection.objects.Length; i++)\n    &#123;\n        var obj &#x3D; Selection.objects[i];\n        var filePath &#x3D; AssetDatabase.GetAssetPath(obj);\n        if (filePath.EndsWith(&quot;.png&quot;, System.StringComparison.CurrentCultureIgnoreCase) ||\n            filePath.EndsWith(&quot;.jpg&quot;, System.StringComparison.CurrentCultureIgnoreCase))\n        &#123;\n            return true;\n        &#125;\n    &#125;\n    return false;\n&#125;</code></pre>\n\n<p>D，生成rgb图片以及alpha图片后设置图片格式  </p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static void SetTextureType(string path, TextureImporterFormat format, FilterMode mode &#x3D; FilterMode.Bilinear)\n        &#123;\n            TextureImporter importer &#x3D; AssetImporter.GetAtPath(path) as TextureImporter;\n            if (importer !&#x3D; null)\n            &#123;\n                importer.textureType &#x3D; TextureImporterType.Sprite;\n                importer.textureFormat &#x3D; format;\n                importer.filterMode &#x3D; mode;\n                importer.mipmapEnabled &#x3D; false;\n                \n                TextureImporterSettings tis &#x3D; new TextureImporterSettings();\n                importer.ReadTextureSettings(tis);\n                importer.SetTextureSettings(tis);\n                AssetDatabase.ImportAsset(path);\n            &#125;\n        &#125;</code></pre>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static void SetTextureTypeCompressed(object pngAsset)\n        &#123;\n\t    Texture2D mainTexture &#x3D; AssetDatabase.LoadAssetAtPath(pngPath.Replace(pngAsset.name, &quot;etc&#x2F;&quot; + pngAsset.name), typeof (Texture2D)) as Texture2D;\n            Texture2D alphaTexture &#x3D; AssetDatabase.LoadAssetAtPath(pngPath.Replace(pngAsset.name, &quot;etc&#x2F;&quot; + pngAsset.name + &quot;_alpha&quot;), typeof (Texture2D)) as Texture2D;\n            string mainPath &#x3D; AssetDatabase.GetAssetPath(mainTexture);\n            string alphaPath &#x3D; AssetDatabase.GetAssetPath(alphaTexture);\n            SetTextureType(mainPath, TextureImporterFormat.AutomaticCompressed);\n            SetTextureType(alphaPath, TextureImporterFormat.AutomaticCompressed);\n        &#125;</code></pre>\n\n<p>E，设置材质球Shader为UIETC，并引用两张生成的图片</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">public static void SetMaterialEtcShader(UnityEngine.Object asset)\n        &#123;\n            string path;\n            Material mat;\n            Texture2D mainTexture;\n            Texture2D alphaTexture;\n\n            path &#x3D; AssetDatabase.GetAssetPath(asset);\n            mat &#x3D; asset as Material;\n            if (mat &#x3D;&#x3D; null)\n            &#123;\n                return;\n            &#125;\n            mat.shader &#x3D; Shader.Find(&quot;Mogo&#x2F;UIETC&quot;);\n            mainTexture &#x3D; AssetDatabase.LoadAssetAtPath(path.Replace(asset.name + &quot;.mat&quot;, &quot;etc&#x2F;&quot; + asset.name + &quot;.png&quot;), typeof(Texture2D)) as Texture2D;\n            mat.mainTexture &#x3D; mainTexture;\n            alphaTexture &#x3D; AssetDatabase.LoadAssetAtPath(path.Replace(asset.name + &quot;.mat&quot;, &quot;etc&#x2F;&quot; + asset.name + &quot;_alpha.png&quot;), typeof(Texture2D)) as Texture2D;\n            mat.SetTexture(&quot;_AlphaTex&quot;, alphaTexture);\n        &#125;</code></pre>\n\n<p>4,运行效果</p>\n","text":" 尊重原创，转载请在文首注明出处：http://blog.csdn.net/cai612781/article/details/78798054 一，压缩方式 我们在Unity中对于图集和纹理，常用的压缩方案按照质量从低到高可以分为： 高压缩：Android:ETC1+Alpha...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"Ngui","slug":"Ngui","count":1,"path":"api/categories/Ngui.json"}],"tags":[{"name":"ETC1 Alpha","slug":"ETC1-Alpha","count":1,"path":"api/tags/ETC1-Alpha.json"}],"toc":"","author":{"name":"GodwinTsai","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/GodwinTsai","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unity协程&在编辑器中使用协程","uid":"21ad9801a0836d599aef927bc9336390","slug":"Unity协程&在编辑器中使用协程","date":"2018-01-06T17:42:45.000Z","updated":"2022-07-16T11:30:57.000Z","comments":true,"path":"api/articles/Unity协程&在编辑器中使用协程.json","keywords":null,"cover":null,"text":" 尊重原创，转载请在文首注明出处：http://blog.csdn.net/cai612781/article/details/78992805一，定义Unity协程(Coroutine)，不是卖机票的携程，是一种类似子线程的机制，可以用来实现一些延时处理的需求，c#中通过yie...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"unity coroutine unity协程 use coroutine in uni 编辑器中使用协程","slug":"unity-coroutine-unity协程-use-coroutine-in-uni-编辑器中使用协程","count":1,"path":"api/tags/unity-coroutine-unity协程-use-coroutine-in-uni-编辑器中使用协程.json"}],"author":{"name":"GodwinTsai","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/GodwinTsai","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}