{"title":"Unity Native Share","uid":"53dd06da211ddc36ae4f082ffffced70","slug":"Unity Native Share","date":"2024-08-15T14:22:12.000Z","updated":"2024-08-15T08:19:54.852Z","comments":true,"path":"api/articles/Unity Native Share.json","keywords":null,"cover":[],"content":"<p>尊重原创，转载请在文首注明出处：<a href=\"https://github.com/godwintsai\">https://github.com/godwintsai</a></p>\n<p>游戏中需要有通过系统app分享图片或者文字或者链接给其它玩家的需求，没有接入第三方插件的情况可以直接编写代码实现。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一、ios分享\"><a href=\"#一、ios分享\" class=\"headerlink\" title=\"一、ios分享\"></a>一、ios分享</h1><p>可以直接通过编写Objective-C++代码实现，在Assets&#x2F;Plugins目录下创建NativeShare.mm文件，代码如下：</p>\n<pre class=\"line-numbers language-Objective-C++\" data-language=\"Objective-C++\"><code class=\"language-Objective-C++\">#ifdef UNITY_4_0 || UNITY_5_0\n#import &quot;iPhone_View.h&quot;\n#else\nextern UIViewController* UnityGetGLViewController();\n#endif\n\nextern &quot;C&quot; void NativeShare_IOS( const char* files[], int filesCount, char* subject, const char* text )\n&#123;\n\tNSMutableArray *items &#x3D; [NSMutableArray new];\n\n\tif( strlen( text ) &gt; 0 )\n\t\t[items addObject:[NSString stringWithUTF8String:text]];\n\n\tfor( int i &#x3D; 0; i &lt; filesCount; i++ )\n\t&#123;\n\t\tNSString *filePath &#x3D; [NSString stringWithUTF8String:files[i]];\n\t\tUIImage *image &#x3D; [UIImage imageWithContentsOfFile:filePath];\n\t\tif( image !&#x3D; nil )\n\t\t\t[items addObject:image];\n\t\telse\n\t\t\t[items addObject:[NSURL fileURLWithPath:filePath]];\n\t&#125;\n\n\tUIActivityViewController *activity &#x3D; [[UIActivityViewController alloc] initWithActivityItems:items applicationActivities:nil];\n\tif( strlen( subject ) &gt; 0 )\n\t\t[activity setValue:[NSString stringWithUTF8String:subject] forKey:@&quot;subject&quot;];\n\n\tUIViewController *rootViewController &#x3D; UnityGetGLViewController();\n\tif( UI_USER_INTERFACE_IDIOM() &#x3D;&#x3D; UIUserInterfaceIdiomPhone ) &#x2F;&#x2F; iPhone\n\t&#123;\n\t\t[rootViewController presentViewController:activity animated:YES completion:nil];\n\t&#125;\n\telse &#x2F;&#x2F; iPad\n\t&#123;\n\t\tUIPopoverController *popup &#x3D; [[UIPopoverController alloc] initWithContentViewController:activity];\n\t\t[popup presentPopoverFromRect:CGRectMake( rootViewController.view.frame.size.width &#x2F; 2, rootViewController.view.frame.size.height &#x2F; 2, 1, 1 ) inView:rootViewController.view permittedArrowDirections:0 animated:YES];\n\t&#125;\n&#125;</code></pre>\n\n<p>如果要分享链接，可以通过传入的链接文本（const char* link）创建url:</p>\n<pre class=\"line-numbers language-Objective-C++\" data-language=\"Objective-C++\"><code class=\"language-Objective-C++\">if( strlen( link ) &gt; 0 )\n\t&#123;\n\t\tNSString *urlRaw &#x3D; [NSString stringWithUTF8String:link];\n\t\tNSURL *url &#x3D; [NSURL URLWithString:urlRaw];\n\t\tif( url &#x3D;&#x3D; nil )\n\t\t&#123;\n\t\t\tif( CHECK_IOS_VERSION( @&quot;9.0&quot; ) )\n\t\t\t&#123;\n\t\t\t\turl &#x3D; [NSURL URLWithString:[urlRaw stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLHostAllowedCharacterSet]]];\n\t\t\t\tif( url &#x3D;&#x3D; nil )\n\t\t\t\t\turl &#x3D; [NSURL URLWithString:[urlRaw stringByAddingPercentEncodingWithAllowedCharacters:[NSCharacterSet URLFragmentAllowedCharacterSet]]];\n\t\t\t&#125;\n\t\t\telse\n\t\t\t\turl &#x3D; [NSURL URLWithString:[urlRaw stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];\n\t\t&#125;\n\t\t\n\t\tif( url !&#x3D; nil )\n\t\t\t[items addObject:url];\n\t\telse\n\t\t\tNSLog( @&quot;Couldn&#39;t create a URL from link: %@&quot;, urlRaw );\n\t&#125;</code></pre>\n\n<p>如果需要知道玩家通过什么app分享，可以如下创建回调，通过Unity Message或Delegate回调：</p>\n<pre class=\"line-numbers language-Objective-C++\" data-language=\"Objective-C++\"><code class=\"language-Objective-C++\">if( strlen( link ) &gt; 0 )\n\t&#123;\n\tactivity.completionWithItemsHandler &#x3D; ^(UIActivityType  _Nullable activityType, BOOL completed, NSArray * _Nullable returnedItems, NSError * _Nullable activityError) &#123;\n                if (completed) &#123;\n                    NSLog(@&quot;User selected: %@&quot;, activityType);\n                    UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareSuccess&quot;, [activityType UTF8String]);\n                &#125; else &#123;\n                    NSLog(@&quot;User cancelled sharing.&quot;);\n                    UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareCancel&quot;, &quot;&quot;);\n                &#125;\n            &#125;;\n\t&#125;</code></pre>\n\n<p>最后在C#代码中定义ios接口即可调用：</p>\n<pre class=\"line-numbers language-CSharp\" data-language=\"CSharp\"><code class=\"language-CSharp\">[System.Runtime.InteropServices.DllImport(&quot;__Internal&quot;)]\n    private static extern void NativeShare_IOS(string[] files, int filesCount, string subject, string text, string link);</code></pre>\n\n<h1 id=\"二、Android分享\"><a href=\"#二、Android分享\" class=\"headerlink\" title=\"二、Android分享\"></a>二、Android分享</h1><p>如果是单纯分享，可以直接编写C#代码：</p>\n<pre class=\"line-numbers language-CSharp\" data-language=\"CSharp\"><code class=\"language-CSharp\">private static void NativeShare_Android(string[] files, string[] mimes, int filesCount, string subject, string text, string title)\n    &#123;\n        var unityPlayer &#x3D; new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;);\n        var currentActivity &#x3D; unityPlayer.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;);\n        var unityContext &#x3D; currentActivity.Call&lt;AndroidJavaObject&gt;(&quot;getApplicationContext&quot;);\n\n        string packageName &#x3D; unityContext.Call&lt;string&gt;(&quot;getPackageName&quot;);\n        string authority &#x3D; packageName + &quot;.provider&quot;;\n\n        var intentClass &#x3D; new AndroidJavaClass(&quot;android.content.Intent&quot;);\n        var intentObject &#x3D; new AndroidJavaObject(&quot;android.content.Intent&quot;);\n\n        if (!string.IsNullOrEmpty(subject))\n        &#123;\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;putExtra&quot;, intentClass.GetStatic&lt;string&gt;(&quot;EXTRA_SUBJECT&quot;), subject);\n        &#125;\n\n        if (!string.IsNullOrEmpty(text))\n        &#123;\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;putExtra&quot;, intentClass.GetStatic&lt;string&gt;(&quot;EXTRA_TEXT&quot;), text);\n        &#125;\n\n        if (!string.IsNullOrEmpty(title))\n        &#123;\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;putExtra&quot;, intentClass.GetStatic&lt;string&gt;(&quot;EXTRA_TITLE&quot;), title);\n        &#125;\n\n        string mime &#x3D; mimes.Length &gt; 0 ? mimes[0] : &quot;*&#x2F;*&quot;;\n\n        if (filesCount &#x3D;&#x3D; 0)\n        &#123;\n            mime &#x3D; &quot;text&#x2F;plain&quot;;\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;setAction&quot;, intentClass.GetStatic&lt;string&gt;(&quot;ACTION_SEND&quot;));\n        &#125;\n        else if (filesCount &#x3D;&#x3D; 1)\n        &#123;\n            var fileObject &#x3D; new AndroidJavaObject(&quot;java.io.File&quot;, files[0]);\n            var fileProvider &#x3D; new AndroidJavaClass(&quot;androidx.core.content.FileProvider&quot;);\n            var uriObject &#x3D; fileProvider.CallStatic&lt;AndroidJavaObject&gt;(&quot;getUriForFile&quot;, unityContext, authority, fileObject);\n\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;putExtra&quot;, intentClass.GetStatic&lt;string&gt;(&quot;EXTRA_STREAM&quot;), uriObject);\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;setAction&quot;, intentClass.GetStatic&lt;string&gt;(&quot;ACTION_SEND&quot;));\n        &#125;\n        else if(filesCount &gt; 1)\n        &#123;\n            string starMime &#x3D; &quot;*&#x2F;*&quot;;\n\n            var arrayList &#x3D; new AndroidJavaObject(&quot;java.util.ArrayList&quot;);\n\n            for (int i &#x3D; 0; i &lt; filesCount; i++)\n            &#123;\n                var fileObject &#x3D; new AndroidJavaObject(&quot;java.io.File&quot;, files[i]);\n                var fileProvider &#x3D; new AndroidJavaClass(&quot;androidx.core.content.FileProvider&quot;);\n                var uriObject &#x3D; fileProvider.CallStatic&lt;AndroidJavaObject&gt;(&quot;getUriForFile&quot;, unityContext, authority, fileObject);\n\n                if (mime !&#x3D; starMime &amp;&amp; mime !&#x3D; mimes[i])\n                &#123;\n                    mime &#x3D; starMime;\n                &#125;\n\n                arrayList.Call&lt;bool&gt;(&quot;add&quot;, uriObject);\n            &#125;\n\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;putParcelableArrayListExtra&quot;, intentClass.GetStatic&lt;string&gt;(&quot;EXTRA_STREAM&quot;), arrayList);\n            intentObject.Call&lt;AndroidJavaObject&gt;(&quot;setAction&quot;, intentClass.GetStatic&lt;string&gt;(&quot;ACTION_SEND_MULTIPLE&quot;));\n        &#125;\n\n        intentObject.Call&lt;AndroidJavaObject&gt;(&quot;setType&quot;, mime);\n        intentObject.Call&lt;AndroidJavaObject&gt;(&quot;addFlags&quot;, intentClass.GetStatic&lt;int&gt;(&quot;FLAG_GRANT_READ_URI_PERMISSION&quot;));\n\n        currentActivity.Call(&quot;startActivity&quot;, intentClass.CallStatic&lt;AndroidJavaObject&gt;(&quot;createChooser&quot;, intentObject, title));\n    &#125;</code></pre>\n\n<h1 id=\"三、获取Android选择了哪个应用\"><a href=\"#三、获取Android选择了哪个应用\" class=\"headerlink\" title=\"三、获取Android选择了哪个应用\"></a>三、获取Android选择了哪个应用</h1><p>需要编写Java代码来实现</p>\n<ol>\n<li><p>在项目Android工程的UnityPlayerActivity子类中实现上述NativeShare代码：</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">public void nativeShare(String[] files, String[] mimes, String subject, String text, String title)\n    &#123;\n        try\n        &#123;\n            Context context &#x3D; getApplicationContext();\n            String packageName &#x3D; context.getPackageName();\n            String authority &#x3D; packageName + &quot;.provider&quot;;\n            String mime &#x3D; mimes.length &gt; 0 ? mimes[0] : &quot;*&#x2F;*&quot;;\n\n            Intent intent &#x3D; new Intent();\n\n            if(subject !&#x3D; null &amp;&amp; !subject.isEmpty())\n            &#123;\n                intent.putExtra(&quot;android.intent.extra.SUBJECT&quot;, subject);\n            &#125;\n            if(text !&#x3D; null &amp;&amp; !text.isEmpty())\n            &#123;\n                intent.putExtra(&quot;android.intent.extra.TEXT&quot;, text);\n            &#125;   \n            if(title !&#x3D; null &amp;&amp; !title.isEmpty())\n            &#123;\n                intent.putExtra(&quot;android.intent.extra.TITLE&quot;, title);\n            &#125;\n\n            String action &#x3D; Intent.ACTION_SEND;\n            int fileCount &#x3D; files.length;\n            if(fileCount &#x3D;&#x3D; 0)\n            &#123;\n                mime &#x3D; &quot;text&#x2F;plain&quot;;\n            &#125;\n            else if(fileCount &#x3D;&#x3D; 1)\n            &#123;\n                File file &#x3D; new File(files[0]);\n                Uri contentUri &#x3D; FileProvider.getUriForFile(context, authority, file);\n                intent.putExtra(Intent.EXTRA_STREAM, contentUri);\n            &#125;\n            else\n            &#123;\n                String starMime &#x3D; &quot;*&#x2F;*&quot;;\n                ArrayList&lt;Uri&gt; fileUris &#x3D; new ArrayList&lt;Uri&gt;();\n                for(int i &#x3D; 0; i &lt; fileCount; i++)\n                &#123;\n                    File file &#x3D; new File(files[i]);\n                    Uri contentUri &#x3D; FileProvider.getUriForFile(context, authority, file);\n                    fileUris.add(contentUri);\n\n                    if (mime !&#x3D; starMime &amp;&amp; mime !&#x3D; mimes[i])\n                    &#123;\n                        mime &#x3D; starMime;\n                    &#125;\n                &#125;\n\n                intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, fileUris);\n                action &#x3D; Intent.ACTION_SEND_MULTIPLE;\n            &#125;\n            intent.setAction(action);\n\n            intent.setType(mime);\n            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n\n            Intent chooseIntent &#x3D; Intent.createChooser(intent, title);\n            \n            &#125;\n\n            startActivityForResult(chooseIntent, SHARE_REQUEST_CODE);\n        \n        &#125;catch (Exception e)\n        &#123;\n            android.util.Log.e(LOG_TAG, &quot;nativeShare exception: &quot; + e.toString());\n            UnityPlayer.UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareError&quot;, e.toString());\n        &#125;\n    &#125;</code></pre>\n</li>\n<li><p>实现BroadcastReceiver来获取回调</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">package com.matchington.mansion.unity;\n\nimport android.content.BroadcastReceiver;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentSender;\nimport android.os.Build;\nimport android.app.PendingIntent;\n\nimport com.unity3d.player.UnityPlayer;\n\npublic class NativeShareReceiver extends BroadcastReceiver &#123;\n\n    private static final String LOG_TAG &#x3D; &quot;[MTUnityPlayerActivity]&quot;;\n\n    public static IntentSender GetIntentSender(Context context, String action)\n    &#123;\n        Intent receiverIntent &#x3D; new Intent(context, NativeShareReceiver.class);\n        receiverIntent.setAction(action);\n\n        int pendingIntentFlags;\n        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.S) &#123;\n            pendingIntentFlags &#x3D; PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE;\n        &#125; else &#123;\n            pendingIntentFlags &#x3D; PendingIntent.FLAG_UPDATE_CURRENT;\n        &#125;\n\n        PendingIntent pendingIntent &#x3D; PendingIntent.getBroadcast(context, 0, receiverIntent, pendingIntentFlags);\n\n        return pendingIntent.getIntentSender();\n    &#125;\n\n    @Override\n    public void onReceive(Context context, Intent intent) &#123;\n        try &#123;\n            if(android.os.Build.VERSION.SDK_INT &lt; 22)&#123;\n                return;\n            &#125;\n            if (intent &#x3D;&#x3D; null)&#123;\n                return;\n            &#125;\n            String action &#x3D; intent.getAction();\n            if (!Intent.ACTION_SEND.equals(action) &amp;&amp; !Intent.ACTION_SEND_MULTIPLE.equals(action))&#123;\n                return;\n            &#125;\n\n            ComponentName component &#x3D; intent.getParcelableExtra(Intent.EXTRA_CHOSEN_COMPONENT);\n            if (component !&#x3D; null)&#123;\n                String packageName &#x3D; component.getPackageName();\n                UnityPlayer.UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareSuccess&quot;, packageName);\n            &#125;\n            else &#123;\n                UnityPlayer.UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareSuccess&quot;, &quot;unknown&quot;);\n            &#125;\n        &#125;\n        catch (Exception e) &#123;\n            android.util.Log.e(LOG_TAG, &quot;(onReceive)nativeShare exception: &quot; + e.toString());\n            UnityPlayer.UnitySendMessage(&quot;NativeShareCallBack&quot;, &quot;OnShareError&quot;, e.toString());\n        &#125;\n    &#125;\n&#125;</code></pre>\n</li>\n<li><p>将1中的createChooser替换如下：</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">Intent chooseIntent;\n            if(android.os.Build.VERSION.SDK_INT &lt; 22)\n                chooseIntent &#x3D; Intent.createChooser(intent, title);\n            else&#123;\n                IntentSender intentSender &#x3D; NativeShareReceiver.GetIntentSender(context, action);\n                chooseIntent &#x3D; Intent.createChooser(intent, title, intentSender);\n            &#125;</code></pre>\n</li>\n<li><p>在AndroidManifest.xml中配置Receiver：</p>\n<pre class=\"line-numbers language-Xml\" data-language=\"Xml\"><code class=\"language-Xml\">&lt;application &gt;\n        &lt;receiver\n            android:name&#x3D;&quot;.NativeShareReceiver&quot;\n            android:exported&#x3D;&quot;false&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name&#x3D;&quot;android.intent.action.SEND&quot; &#x2F;&gt;\n                &lt;action android:name&#x3D;&quot;android.intent.action.SEND_MULTIPLE&quot; &#x2F;&gt;\n                &lt;category android:name&#x3D;&quot;android.intent.category.DEFAULT&quot; &#x2F;&gt;\n                &lt;data android:mimeType&#x3D;&quot;*&#x2F;*&quot; &#x2F;&gt;\n                &lt;data android:mimeType&#x3D;&quot;text&#x2F;plain&quot; &#x2F;&gt;\n            &lt;&#x2F;intent-filter&gt;\n        &lt;&#x2F;receiver&gt;\n    &lt;&#x2F;application&gt;</code></pre>\n</li>\n<li><p>Build Android 工程生成aar，放到Unity工程Assets&#x2F;Plugins中</p>\n</li>\n</ol>\n<h1 id=\"四-遇到的问题\"><a href=\"#四-遇到的问题\" class=\"headerlink\" title=\"四. 遇到的问题\"></a>四. 遇到的问题</h1><ol>\n<li><p>通过link软件分享纯文本时，弹出提示框报错<br> <img src=\"https://raw.githubusercontent.com/GodwinTsai/ImageHosting/master/img/image-20240815153935191.png\" alt=\"image-20240815153935191\"></p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">原因：分享纯文本时设置类型为任意类型：&quot;*&#x2F;*&quot;\n\n解决：改为&quot;text&#x2F;plain&quot;</code></pre>\n</li>\n<li><p>Meizu系统没法收到回调</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">暂未找到原因及解决方案\n可以考虑的方向有：实现自定义系统分享界面及应用菜单</code></pre>\n</li>\n<li><p>Android系统只能知道玩家点了哪个应用，但没法知道是否分享成功，有了解的大佬欢迎探讨指教</p>\n</li>\n</ol>\n<h1 id=\"五-其它参考\"><a href=\"#五-其它参考\" class=\"headerlink\" title=\"五. 其它参考\"></a>五. 其它参考</h1><ol>\n<li><a href=\"https://github.com/yasirkula/UnityNativeShare\">https://github.com/yasirkula/UnityNativeShare</a></li>\n<li><a href=\"https://www.mob.com/mobService/sharesdk\">https://www.mob.com/mobService/sharesdk</a> （第三方插件，暂未研究）</li>\n</ol>\n","feature":true,"text":"尊重原创，转载请在文首注明出处：https://github.com/godwintsai 游戏中需要有通过系统app分享图片或者文字或者链接给其它玩家的需求，没有接入第三方插件的情况可以直接编写代码实现。 一、ios分享可以直接通过编写Objective-C++代码实现，在As...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"Unity","slug":"Unity","count":5,"path":"api/categories/Unity.json"}],"tags":[{"name":"Unity Native Share","slug":"Unity-Native-Share","count":1,"path":"api/tags/Unity-Native-Share.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81ios%E5%88%86%E4%BA%AB\"><span class=\"toc-text\">一、ios分享</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Android%E5%88%86%E4%BA%AB\"><span class=\"toc-text\">二、Android分享</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E8%8E%B7%E5%8F%96Android%E9%80%89%E6%8B%A9%E4%BA%86%E5%93%AA%E4%B8%AA%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">三、获取Android选择了哪个应用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">四. 遇到的问题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E5%85%B6%E5%AE%83%E5%8F%82%E8%80%83\"><span class=\"toc-text\">五. 其它参考</span></a></li></ol>","author":{"name":"GodwinTsai","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/GodwinTsai","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Skill&Buff Editor","uid":"9445c1590d18cd4588eaa614d62d2feb","slug":"Skill&Buff Editor","date":"2020-04-02T02:57:25.000Z","updated":"2022-07-16T11:30:57.000Z","comments":true,"path":"api/articles/Skill&Buff Editor.json","keywords":null,"cover":[],"text":" 之前项目做的一个moba的skill&amp;buff编辑器，采用winform实现，独立于Unity。 主编辑窗口（图中左上角），通过c# Attribute，反射技能逻辑的字段，采用节点和连线编辑，独立于具体的技能逻辑。 节点的属性编辑（图中右上角）通过扩展winform的...","link":"","photos":[],"count_time":{"symbolsCount":304,"symbolsTime":"1 mins."},"categories":[{"name":"C#","slug":"C","count":4,"path":"api/categories/C.json"}],"tags":[{"name":"Unity","slug":"Unity","count":1,"path":"api/tags/Unity.json"}],"author":{"name":"GodwinTsai","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/GodwinTsai","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}